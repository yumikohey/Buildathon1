"""
Django settings for visual_memory_search project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from decouple import config
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-a_g8p+t7a!0!v8-^7d*c#nrteyl)3=)g)hw02*hk*zq-yb%ha*')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.vercel.app', 'buildathon1-86h6zzh52-jacks-projects-7449b7ef.vercel.app']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_rq',
    'screenshots',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'visual_memory_search.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'visual_memory_search.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Database configuration
# Use PostgreSQL for production (Vercel), SQLite for development
DATABASE_URL = config('DATABASE_URL', default=None)
if DATABASE_URL:
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # Check if we're in production (Vercel) environment
    SUPABASE_DB_HOST = config('SUPABASE_DB_HOST', default=None)
    SUPABASE_DB_NAME = config('SUPABASE_DB_NAME', default=None)
    SUPABASE_DB_USER = config('SUPABASE_DB_USER', default=None)
    SUPABASE_DB_PASSWORD = config('SUPABASE_DB_PASSWORD', default=None)
    SUPABASE_DB_PORT = config('SUPABASE_DB_PORT', default='5432')
    
    if SUPABASE_DB_HOST and SUPABASE_DB_NAME and SUPABASE_DB_USER and SUPABASE_DB_PASSWORD:
        # Use Supabase PostgreSQL for production
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': SUPABASE_DB_NAME,
                'USER': SUPABASE_DB_USER,
                'PASSWORD': SUPABASE_DB_PASSWORD,
                'HOST': SUPABASE_DB_HOST,
                'PORT': SUPABASE_DB_PORT,
                'OPTIONS': {
                    'sslmode': 'require',
                },
            }
        }
    else:
        # Use SQLite for local development
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Django-RQ Configuration
# Use Redis URL from environment for production, fallback to localhost for development
REDIS_URL = config('REDIS_URL', default='redis://localhost:6379/0')
RQ_QUEUES = {
    'default': {
        'HOST': 'localhost' if 'localhost' in REDIS_URL else None,
        'PORT': 6379 if 'localhost' in REDIS_URL else None,
        'DB': 0 if 'localhost' in REDIS_URL else None,
        'PASSWORD': '' if 'localhost' in REDIS_URL else None,
        'DEFAULT_TIMEOUT': 360,
        'CONNECTION_KWARGS': {} if 'localhost' in REDIS_URL else {'url': REDIS_URL},
    }
}

# Anthropic API Configuration
ANTHROPIC_API_KEY = config('ANTHROPIC_API_KEY', default='')

# Batch Processing Configuration
BATCH_PROCESSING_THRESHOLD = 3  # Use batch processing for 3+ screenshots
MAX_BATCH_SIZE = 100  # Maximum screenshots per batch (Claude limit: 100,000 requests)

# File Upload Settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
